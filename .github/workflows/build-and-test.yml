name: Build, Test, and Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x

      - name: Cache NuGet Packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./src

      - name: Build
        run: dotnet build --no-restore --configuration Release /p:Version=0.0.0
        working-directory: ./src

      - name: Test
        run: dotnet test --no-build --configuration Release --verbosity normal
        working-directory: ./src

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults/

      - name: Pack NuGet Package
        run: dotnet pack --no-build --configuration Release --output ./nupkg /p:Version=0.0.0
        working-directory: ./src

  publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: '6.0.x'

      - name: Determine Version
        id: version_step # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v3.1.11
        with:
          useConfigFile: true
          configFilePath: VersionConfig.yml

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./src

      - name: Build
        run: dotnet build --no-restore --configuration Release /p:Version=${{ steps.version_step.outputs.FullSemVer }}
        working-directory: ./src

      - name: Test
        run: dotnet test --no-build --configuration Release --verbosity normal
        working-directory: ./src
        
      - name: Publish Commandline (linux-x64)
        run: dotnet publish -c Release -r linux-x64 --self-contained
        working-directory: ./src/FrontierSharp.CommandLine

      - name: Publish Commandline (linux-arm64)
        run: dotnet publish -c Release -r linux-arm64 --self-contained
        working-directory: ./src/FrontierSharp.CommandLine
        
      - name: Publish Commandline (osx-x64)
        run: dotnet publish -c Release -r osx-x64 --self-contained
        working-directory: ./src/FrontierSharp.CommandLine
        
      - name: Publish Commandline (osx-arm64)
        run: dotnet publish -c Release -r osx-arm64 --self-contained
        working-directory: ./src/FrontierSharp.CommandLine

      - name: Publish Commandline (win-x64)
        run: dotnet publish -c Release -r win-x64 --self-contained
        working-directory: ./src/FrontierSharp.CommandLine

      - name: Publish Commandline (win-arm64)
        run: dotnet publish -c Release -r win-arm64 --self-contained
        working-directory: ./src/FrontierSharp.CommandLine
        
      - name: Pack NuGet Package
        run: dotnet pack --no-build --configuration Release --output ./nupkg /p:Version=${{ steps.version_step.outputs.FullSemVer }}
        working-directory: ./src

      - name: Publish NuGet Package
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: dotnet nuget push ./nupkg/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json
        working-directory: ./src
        
      - name: Create Linux-x64 Archive
        run: tar -czvf $GITHUB_WORKSPACE/src/frontierctl-linux-x64.tar.gz .
        working-directory: ./src/FrontierSharp.CommandLine/bin/Release/net9.0/linux-x64/publish
        
      - name: Create Linux-arm64 Archive
        run: tar -czvf $GITHUB_WORKSPACE/src/frontierctl-linux-arm64.tar.gz .
        working-directory: ./src/FrontierSharp.CommandLine/bin/Release/net9.0/linux-arm64/publish

      - name: Create OSX-x64 Archive
        run: tar -czvf $GITHUB_WORKSPACE/src/frontierctl-osx-x64.tar.gz .
        working-directory: ./src/FrontierSharp.CommandLine/bin/Release/net9.0/osx-x64/publish

      - name: Create OSX-arm64 Archive
        run: tar -czvf $GITHUB_WORKSPACE/src/frontierctl-osx-arm64.tar.gz .
        working-directory: ./src/FrontierSharp.CommandLine/bin/Release/net9.0/osx-arm64/publish

      - name: Create Windows-x64 Archive
        run: zip -r $GITHUB_WORKSPACE/src/frontierctl-win-x64.zip .
        working-directory: ./src/FrontierSharp.CommandLine/bin/Release/net9.0/win-x64/publish
        
      - name: Create Windows-arm64 Archive
        run: zip -r $GITHUB_WORKSPACE/src/frontierctl-win-arm64.zip .
        working-directory: ./src/FrontierSharp.CommandLine/bin/Release/net9.0/win-arm64/publish

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version_step.outputs.FullSemVer }}
          commit: ${{ github.sha }}
          artifacts: "./src/nupkg/*.nupkg,./src/*.tar.gz,./src/*.zip"
